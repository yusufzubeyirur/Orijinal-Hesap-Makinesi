import './styles.css'
import { useState } from 'react'
import Buttons from './components/Buttons'
import Display from './components/Display'
import calculateResult from './utilities/calculateResult'
import getNum from './utilities/getNum'

export default function App() {
  const INITIAL_STATE = {
    currentNum: [],
    previousNum: [],
    operation: undefined,
    result: [],
  }

  const [currentCalc, setCurrentCalc] = useState(INITIAL_STATE)

  const { currentNum, previousNum, operation, result } = currentCalc

  const conditionOne =
    !currentNum[0] && !previousNum[0] && !operation && !result[0]
  const conditionTwo =
    currentNum[0] && !previousNum[0] && !operation && !result[0]
  const conditionThree =
    !currentNum[0] && previousNum[0] && operation && !result[0]
  const conditionFour =
    currentNum[0] && previousNum[0] && operation && !result[0]
  const conditionFive =
    currentNum[0] && previousNum[0] && operation && result[0]
  const conditionSix =
    !currentNum[0] && !previousNum[0] && operation && result[0]

  function handleClick(event) {
    const numFromClick = event.target.dataset.number
    const opFromClick = event.target.dataset.operation
    const otherFromClick = event.target.dataset.other
    const percentFromClick =
      otherFromClick === 'percent' ? otherFromClick : undefined
    const decimalFromClick =
      otherFromClick === 'decimal' ? otherFromClick : undefined
    const equalsFromClick =
      otherFromClick === 'equals' ? otherFromClick : undefined
    const negativeFromClick =
      otherFromClick === 'negative' ? otherFromClick : undefined
    const clearFromClick =
      otherFromClick === 'clear' ? otherFromClick : undefined
    const invalidEntry = checkForInvalidEntry(numFromClick)

    function checkForInvalidEntry() {
      if (
        numFromClick === '0' &&
        currentNum.length === 1 &&
        currentNum[0] === '0'
      ) {
        return true
      } else {
        if (
          currentNum.join('') === '0.' &&
          conditionTwo &&
          !numFromClick &&
          !clearFromClick
        ) {
          return true
        } else {
          return false
        }
      }
    }

    if (invalidEntry) {
      return
    }

    /* Challenge
    
  SayÄ± butonlarÄ± Ã§alÄ±ÅŸmÄ±yor Ã§Ã¼nkÃ¼ currentCalc state'i gÃ¼ncellemiyorlar. GÃ¶reviniz aÅŸaÄŸÄ±dakileri yaparak bunu dÃ¼zeltmektir: 
  
      1. 86, 95 ve 104 numaralÄ± satÄ±rlardaki Ã¼Ã§ gÃ¶revi tamamlayÄ±n. Her gÃ¶rev, yukarÄ±daki 20. satÄ±rda tanÄ±mlanan altÄ± koÅŸuldan hangisinin doÄŸru olduÄŸuna baÄŸlÄ± olarak state'in belirli bir ÅŸekilde gÃ¼ncellenmesini iÃ§erir. 
         
      2. Hesap makinesini gerÃ§ek bir kullanÄ±cÄ±nÄ±n kullanabileceÄŸi Ã§eÅŸitli ÅŸekillerde kullanarak test edin. Tam olarak test etmek iÃ§in altÄ± koÅŸulun her birini yeniden oluÅŸturmaya Ã§alÄ±ÅŸÄ±n 
  
Hesap makinesinin Ã§alÄ±ÅŸmasÄ±nÄ± saÄŸlamak iÃ§in *sadece* aÅŸaÄŸÄ±daki Ã¼Ã§ gÃ¶revi tamamlamanÄ±z ve her gÃ¶rev iÃ§in *sadece* geÃ§erli currentCalc state'ini gÃ¼ncellemeniz gerekir! */

    if (numFromClick) {
      if (conditionOne || conditionTwo || conditionThree || conditionFour) {
        /* GÃ¶rev 1/3 - Bir SayÄ± OluÅŸturma 
  
      a. numFromClick deÄŸeri, currentCalc'Ä±n currentNum array'inin sonuna eklenmeli ve array'de zaten kayÄ±tlÄ± olan deÄŸerler korunmalÄ±dÄ±r. 
    
         
      b. currentCalc'Ä±n diÄŸer tÃ¼m Ã¶zellikleri korunmalÄ±dÄ±r. */
                           
 setCurrentCalc((prevCalc) => ({
          ...prevCalc,
          currentNum:[...prevCalc.currentNum,numFromClick]
      }))
       
      } else if (conditionFive) {
        /* GÃ¶rev 2/3 - Yeni Bir Hesaplama BaÅŸlatmak
            
      a. numFromClick deÄŸeri currentCalc'Ä±n currentNum array'ine eklenmelidir. Dizideki Ã¶nceki deÄŸerler *korunmamalÄ±dÄ±r* - numFromClick deÄŸeri dizideki *tek* deÄŸer haline gelmelidir. 

      b. currentCalc'Ä±n diÄŸer tÃ¼m Ã¶zellikleri, b INITIAL_STATE (yukarÄ±daki 9. satÄ±r) iÃ§inde kaydedilen ilk deÄŸerlerine geri dÃ¶ndÃ¼rÃ¼lmelidir. */
        setCurrentCalc({
          ...INITIAL_STATE,
          currentNum:[numFromClick],
        })

      } else if (conditionSix) {
        /* GÃ¶rev 3/3 - Hesaplamaya Devam Etme 
            
      a. currentCalc'Ä±n sonuÃ§ array'ine kaydedilen deÄŸer, boÅŸ previousNum array'ine eklenmeli ve sonuÃ§ array'i boÅŸ hale getirilmelidir. BaÅŸka bir deyiÅŸle:
                      
          Ã–nce: previousNum: []
                      result: [someValue]
                      
        Sonra:   previousNum: [someValue]
                      result: []
                        
      b. numFromClick deÄŸeri boÅŸ currentNum array'ine kaydedilmelidir. 
                
      c. operation deÄŸeri (bir string) korunmalÄ±dÄ±r. */
      setCurrentCalc((prevCalc) => ({
        currentNum:[numFromClick],
        previousNum:prevCalc.result,
        result:[],
        operation:prevCalc.operation,
      }))
                       
      }
    } else if (opFromClick) {
      /* ðŸš¨ ðŸš¨ ðŸš¨ ðŸš¨ ðŸš¨ ðŸš¨ ðŸš¨ ðŸš¨ ðŸš¨ SPOILER UYARISI ðŸš¨ ðŸš¨ ðŸš¨ ðŸš¨ ðŸš¨ ðŸš¨ ðŸš¨ ðŸš¨ ðŸš¨ ðŸš¨   
        
        
        
        
        Spoilerlardan kaÃ§Ä±nmak iÃ§in aÅŸaÄŸÄ± kaydÄ±rmayÄ±n. 

        Alternatif olarak, eÄŸer Ã§ok zorlanÄ±yorsanÄ±z, aÅŸaÄŸÄ± kaydÄ±rmayÄ± dÃ¼ÅŸÃ¼nÃ¼n. Sonraki kod satÄ±rlarÄ±nÄ±n Ã§oÄŸu yukarÄ±da yazmanÄ±z gerekenlere benzerdir.  
        
        
      
        
 ðŸš¨ ðŸš¨ ðŸš¨ ðŸš¨ ðŸš¨ ðŸš¨ ðŸš¨ ðŸš¨ ðŸš¨ SPOILER UYARISI ðŸš¨ ðŸš¨ ðŸš¨ ðŸš¨ ðŸš¨ ðŸš¨ ðŸš¨ ðŸš¨ ðŸš¨ ðŸš¨ */

      if (conditionTwo) {
        setCurrentCalc((prevCalc) => ({
          currentNum: [],
          previousNum: prevCalc.currentNum,
          operation: opFromClick,
          result: [],
        }))
      } else if (conditionThree || conditionSix) {
        setCurrentCalc((prevCalc) => ({
          ...prevCalc,
          operation: opFromClick,
        }))
      } else if (conditionFour) {
        setCurrentCalc((prevCalc) => ({
          currentNum: [],
          previousNum: [],
          result: calculateResult(prevCalc).split(''),
          operation: opFromClick,
        }))
      } else if (conditionFive) {
        setCurrentCalc((prevCalc) => ({
          previousNum: prevCalc.result,
          operation: opFromClick,
          currentNum: [],
          result: [],
        }))
      }
    } else if (equalsFromClick) {
      if (conditionThree) {
        setCurrentCalc((prevCalc) => ({
          ...prevCalc,
          currentNum: previousNum,
          result: calculateResult(prevCalc).split(''),
        }))
      } else if (conditionFour || conditionFive || conditionSix) {
        setCurrentCalc((prevCalc) => ({
          ...prevCalc,
          result: calculateResult(prevCalc).split(''),
        }))
      }
    } else if (percentFromClick) {
      if (conditionTwo || conditionFour) {
        setCurrentCalc((prevCalc) => ({
          ...prevCalc,
          currentNum: (getNum(prevCalc.currentNum) / 100).toString().split(''),
        }))
      } else if (conditionFive) {
        setCurrentCalc((prevCalc) => ({
          ...INITIAL_STATE,
          currentNum: (getNum(prevCalc.result) / 100).toString().split(''),
        }))
      }
    } else if (negativeFromClick) {
      if (conditionTwo || conditionFour) {
        setCurrentCalc((prevCalc) => ({
          ...prevCalc,
          currentNum: (getNum(prevCalc.currentNum) * -1).toString().split(''),
        }))
      } else if (conditionFive) {
        setCurrentCalc((prevCalc) => ({
          ...prevCalc,
          result: (getNum(prevCalc.result) * -1).toString().split(''),
        }))
      }
    } else if (decimalFromClick) {
      if (conditionOne || conditionThree) {
        setCurrentCalc((prevCalc) => ({
          ...prevCalc,
          currentNum: ['0', '.'],
        }))
      } else if (
        !currentNum.includes('.') &&
        (conditionTwo || conditionThree || conditionFour || conditionSix)
      ) {
        setCurrentCalc((prevCalc) => ({
          ...prevCalc,
          currentNum: [...prevCalc.currentNum, '.'],
        }))
      } else if (conditionFive) {
        setCurrentCalc({
          ...INITIAL_STATE,
          currentNum: ['0', '.'],
        })
      }
    } else if (clearFromClick) {
      if (conditionFive) {
        setCurrentCalc((prevCalc) => ({
          ...INITIAL_STATE,
          currentNum: prevCalc.result,
        }))
      } else if (conditionTwo || conditionSix) {
        setCurrentCalc(INITIAL_STATE)
      } else if (conditionThree) {
        setCurrentCalc((prevCalc) => ({
          currentNum: prevCalc.previousNum,
          previousNum: [],
          result: [],
          operation: undefined,
        }))
      } else if (conditionFour) {
        if (currentNum.length != 0) {
          setCurrentCalc((prevCalc) => ({
            ...prevCalc,
            currentNum: [],
          }))
        } else {
          setCurrentCalc(INITIAL_STATE)
        }
      }
    } else {
      setCurrentCalc(INITIAL_STATE)
    }
  }

  function getClearOption() {
    if (
      conditionOne ||
      conditionSix ||
      (conditionFour && currentNum.length === 0)
    ) {
      return 'AC'
    } else {
      return 'C'
    }
  }

  const buttonData = {
    operation: currentCalc.operation,
    clearOption: getClearOption(),
  }

  return (
    <div className='calculator-container'>
      <Display currentCalc={currentCalc} />
      <Buttons handleClick={handleClick} buttonData={buttonData} />
    </div>
  )
}
